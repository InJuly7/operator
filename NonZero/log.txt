Original Tensor:
tensor([[[0.5785, 0.3871, 0.2652, 0.7077, 0.8475],
         [0.2625, 0.2155, 0.2042, 0.9301, 0.4989],
         [0.9877, 0.9221, 0.7443, 0.4655, 0.2754],
         [0.8788, 0.4926, 0.6791, 0.2032, 0.9997],
         [0.3607, 0.5976, 0.7060, 0.7857, 0.9448],
         [0.8650, 0.2403, 0.2697, 0.5979, 0.2962]],

        [[0.0206, 0.3412, 0.8765, 0.2200, 0.3311],
         [0.0644, 0.0267, 0.7601, 0.1233, 0.4454],
         [0.9699, 0.5049, 0.9909, 0.3508, 0.1143],
         [0.1193, 0.1645, 0.3749, 0.9836, 0.2298],
         [0.1448, 0.2623, 0.1652, 0.7392, 0.2886],
         [0.4108, 0.6846, 0.5879, 0.8574, 0.1455]],

        [[0.2619, 0.2288, 0.8727, 0.5582, 0.5454],
         [0.8392, 0.1206, 0.7620, 0.0499, 0.2626],
         [0.1992, 0.7118, 0.4815, 0.4897, 0.4656],
         [0.8671, 0.0794, 0.3914, 0.6391, 0.4668],
         [0.7070, 0.6496, 0.9367, 0.3321, 0.6851],
         [0.0113, 0.8097, 0.5538, 0.1593, 0.9519]],

        [[0.6201, 0.2448, 0.9454, 0.9086, 0.3741],
         [0.3983, 0.1847, 0.7982, 0.0845, 0.0240],
         [0.3304, 0.9447, 0.0184, 0.4601, 0.0903],
         [0.1737, 0.8231, 0.5896, 0.2565, 0.9732],
         [0.9852, 0.9896, 0.5899, 0.2270, 0.4467],
         [0.1281, 0.9793, 0.2819, 0.9986, 0.4718]],

        [[0.4304, 0.0702, 0.4201, 0.0345, 0.0208],
         [0.2144, 0.0413, 0.1329, 0.2903, 0.5432],
         [0.7255, 0.9874, 0.5865, 0.7439, 0.9824],
         [0.8812, 0.7635, 0.6934, 0.4621, 0.4256],
         [0.0966, 0.3243, 0.8128, 0.3447, 0.6071],
         [0.7253, 0.7038, 0.8913, 0.3748, 0.6636]],

        [[0.3267, 0.5692, 0.8011, 0.1685, 0.1924],
         [0.3687, 0.1996, 0.0683, 0.0659, 0.8832],
         [0.7883, 0.2559, 0.7678, 0.6665, 0.5641],
         [0.5466, 0.8191, 0.3121, 0.4079, 0.9627],
         [0.6323, 0.0236, 0.7252, 0.7911, 0.5552],
         [0.2093, 0.2976, 0.1254, 0.6107, 0.2811]]], device='cuda:0')

Mask:
tensor([[[1., 1., 1., 0., 1.],
         [0., 1., 1., 1., 0.],
         [0., 1., 0., 1., 1.],
         [1., 1., 0., 0., 1.],
         [1., 0., 1., 0., 1.],
         [0., 0., 1., 1., 1.]],

        [[1., 1., 1., 1., 1.],
         [0., 1., 0., 1., 1.],
         [0., 1., 1., 1., 1.],
         [1., 0., 1., 1., 1.],
         [1., 1., 1., 1., 1.],
         [1., 1., 1., 0., 1.]],

        [[1., 1., 1., 0., 1.],
         [1., 1., 1., 1., 0.],
         [1., 1., 1., 0., 1.],
         [0., 1., 0., 0., 1.],
         [0., 1., 1., 1., 1.],
         [1., 0., 1., 0., 1.]],

        [[0., 0., 1., 1., 0.],
         [1., 1., 0., 1., 0.],
         [0., 0., 0., 1., 1.],
         [0., 1., 0., 1., 1.],
         [0., 1., 1., 1., 1.],
         [1., 0., 1., 0., 1.]],

        [[1., 1., 1., 1., 0.],
         [0., 0., 1., 1., 0.],
         [1., 1., 0., 1., 0.],
         [1., 1., 0., 1., 1.],
         [0., 1., 1., 1., 1.],
         [0., 1., 1., 0., 1.]],

        [[0., 1., 1., 1., 1.],
         [0., 0., 1., 1., 1.],
         [1., 1., 0., 1., 1.],
         [1., 1., 1., 1., 1.],
         [1., 1., 1., 0., 1.],
         [1., 0., 0., 1., 1.]]], device='cuda:0')

Tensor with Random Zeros:
torch.Size([6, 6, 5])
tensor([[[0.5785, 0.3871, 0.2652, 0.0000, 0.8475],
         [0.0000, 0.2155, 0.2042, 0.9301, 0.0000],
         [0.0000, 0.9221, 0.0000, 0.4655, 0.2754],
         [0.8788, 0.4926, 0.0000, 0.0000, 0.9997],
         [0.3607, 0.0000, 0.7060, 0.0000, 0.9448],
         [0.0000, 0.0000, 0.2697, 0.5979, 0.2962]],

        [[0.0206, 0.3412, 0.8765, 0.2200, 0.3311],
         [0.0000, 0.0267, 0.0000, 0.1233, 0.4454],
         [0.0000, 0.5049, 0.9909, 0.3508, 0.1143],
         [0.1193, 0.0000, 0.3749, 0.9836, 0.2298],
         [0.1448, 0.2623, 0.1652, 0.7392, 0.2886],
         [0.4108, 0.6846, 0.5879, 0.0000, 0.1455]],

        [[0.2619, 0.2288, 0.8727, 0.0000, 0.5454],
         [0.8392, 0.1206, 0.7620, 0.0499, 0.0000],
         [0.1992, 0.7118, 0.4815, 0.0000, 0.4656],
         [0.0000, 0.0794, 0.0000, 0.0000, 0.4668],
         [0.0000, 0.6496, 0.9367, 0.3321, 0.6851],
         [0.0113, 0.0000, 0.5538, 0.0000, 0.9519]],

        [[0.0000, 0.0000, 0.9454, 0.9086, 0.0000],
         [0.3983, 0.1847, 0.0000, 0.0845, 0.0000],
         [0.0000, 0.0000, 0.0000, 0.4601, 0.0903],
         [0.0000, 0.8231, 0.0000, 0.2565, 0.9732],
         [0.0000, 0.9896, 0.5899, 0.2270, 0.4467],
         [0.1281, 0.0000, 0.2819, 0.0000, 0.4718]],

        [[0.4304, 0.0702, 0.4201, 0.0345, 0.0000],
         [0.0000, 0.0000, 0.1329, 0.2903, 0.0000],
         [0.7255, 0.9874, 0.0000, 0.7439, 0.0000],
         [0.8812, 0.7635, 0.0000, 0.4621, 0.4256],
         [0.0000, 0.3243, 0.8128, 0.3447, 0.6071],
         [0.0000, 0.7038, 0.8913, 0.0000, 0.6636]],

        [[0.0000, 0.5692, 0.8011, 0.1685, 0.1924],
         [0.0000, 0.0000, 0.0683, 0.0659, 0.8832],
         [0.7883, 0.2559, 0.0000, 0.6665, 0.5641],
         [0.5466, 0.8191, 0.3121, 0.4079, 0.9627],
         [0.6323, 0.0236, 0.7252, 0.0000, 0.5552],
         [0.2093, 0.0000, 0.0000, 0.6107, 0.2811]]], device='cuda:0')
Torch Nonzero Operator Result
torch.Size([125, 3])
tensor([[0, 0, 0],
        [0, 0, 1],
        [0, 0, 2],
        [0, 0, 4],
        [0, 1, 1],
        [0, 1, 2],
        [0, 1, 3],
        [0, 2, 1],
        [0, 2, 3],
        [0, 2, 4],
        [0, 3, 0],
        [0, 3, 1],
        [0, 3, 4],
        [0, 4, 0],
        [0, 4, 2],
        [0, 4, 4],
        [0, 5, 2],
        [0, 5, 3],
        [0, 5, 4],
        [1, 0, 0],
        [1, 0, 1],
        [1, 0, 2],
        [1, 0, 3],
        [1, 0, 4],
        [1, 1, 1],
        [1, 1, 3],
        [1, 1, 4],
        [1, 2, 1],
        [1, 2, 2],
        [1, 2, 3],
        [1, 2, 4],
        [1, 3, 0],
        [1, 3, 2],
        [1, 3, 3],
        [1, 3, 4],
        [1, 4, 0],
        [1, 4, 1],
        [1, 4, 2],
        [1, 4, 3],
        [1, 4, 4],
        [1, 5, 0],
        [1, 5, 1],
        [1, 5, 2],
        [1, 5, 4],
        [2, 0, 0],
        [2, 0, 1],
        [2, 0, 2],
        [2, 0, 4],
        [2, 1, 0],
        [2, 1, 1],
        [2, 1, 2],
        [2, 1, 3],
        [2, 2, 0],
        [2, 2, 1],
        [2, 2, 2],
        [2, 2, 4],
        [2, 3, 1],
        [2, 3, 4],
        [2, 4, 1],
        [2, 4, 2],
        [2, 4, 3],
        [2, 4, 4],
        [2, 5, 0],
        [2, 5, 2],
        [2, 5, 4],
        [3, 0, 2],
        [3, 0, 3],
        [3, 1, 0],
        [3, 1, 1],
        [3, 1, 3],
        [3, 2, 3],
        [3, 2, 4],
        [3, 3, 1],
        [3, 3, 3],
        [3, 3, 4],
        [3, 4, 1],
        [3, 4, 2],
        [3, 4, 3],
        [3, 4, 4],
        [3, 5, 0],
        [3, 5, 2],
        [3, 5, 4],
        [4, 0, 0],
        [4, 0, 1],
        [4, 0, 2],
        [4, 0, 3],
        [4, 1, 2],
        [4, 1, 3],
        [4, 2, 0],
        [4, 2, 1],
        [4, 2, 3],
        [4, 3, 0],
        [4, 3, 1],
        [4, 3, 3],
        [4, 3, 4],
        [4, 4, 1],
        [4, 4, 2],
        [4, 4, 3],
        [4, 4, 4],
        [4, 5, 1],
        [4, 5, 2],
        [4, 5, 4],
        [5, 0, 1],
        [5, 0, 2],
        [5, 0, 3],
        [5, 0, 4],
        [5, 1, 2],
        [5, 1, 3],
        [5, 1, 4],
        [5, 2, 0],
        [5, 2, 1],
        [5, 2, 3],
        [5, 2, 4],
        [5, 3, 0],
        [5, 3, 1],
        [5, 3, 2],
        [5, 3, 3],
        [5, 3, 4],
        [5, 4, 0],
        [5, 4, 1],
        [5, 4, 2],
        [5, 4, 4],
        [5, 5, 0],
        [5, 5, 3],
        [5, 5, 4]], device='cuda:0', dtype=torch.int32)
Custom Kernel Nonzero Result
(1,.,.) = 
   43   44   45  180   46
  180   47   48   49  180
  180   50  180   51   52
   53   54  180  180   55
   56  180   57  180   58
  180  180   59   60   61

(2,.,.) = 
   62   63   83   84   85
  180   86  180   87   88
  180   89   90   91   92
   93  180   94   95   96
   97   98   99  100  101
  102  103  104  180  105

(3,.,.) = 
  106  107  108  180    0
    1    2    3    4  180
    5    6    7  180    8
  180    9  180  180   10
  180   11   12   13   14
   15  180   16  180   17

(4,.,.) = 
  180  180   18   19  180
   20   64  180   65  180
  180  180  180   66   67
  180   68  180   69   70
  180   71   72   73   74
   75  180   76  180   77

(5,.,.) = 
   78   79   80   81  180
  180  180   82   21  180
   22   23  180   24  180
   25   26  180   27   28
  180   29   30   31   32
  180   33   34  180   35

(6,.,.) = 
  180   36   37   38   39
  180  180   40   41   42
  109  110  180  111  112
  113  114  115  116  117
  118  119  120  180  121
  122  180  180  123  124
[ CUDAIntType{6,6,5} ]
125
  64
  65
  66
  67
  68
  70
  71
  72
  74
  76
  79
  81
  82
  83
  84
  85
  87
  89
  92
  93
  95
 128
 130
 131
 133
 135
 136
 138
 139
 141
 142
 143
 144
 146
 147
 149
 151
 152
 153
 154
 157
 158
 159
   0
   1
   2
   4
   6
   7
   8
  11
  13
  14
  15
  16
  19
  20
  22
  24
  27
  28
  29
  30
  31
  96
  98
 103
 104
 106
 108
 109
 111
 112
 113
 114
 115
 117
 119
 120
 121
 122
 123
 127
  32
  33
  34
  36
  38
  39
  41
  42
  43
  44
  45
  47
  48
  49
  50
  51
  52
  53
  54
  55
  56
  57
  59
  60
  61
  62
 160
 161
 163
 164
 165
 166
 167
 168
 169
 170
 171
 172
 174
 175
 178
 179
[ CUDAIntType{125} ]
   0
   1
   2
   4
   6
   7
   8
  11
  13
  14
  15
  16
  19
  20
  22
  24
  27
  28
  29
  30
  31
  32
  33
  34
  36
  38
  39
  41
  42
  43
  44
  45
  47
  48
  49
  50
  51
  52
  53
  54
  55
  56
  57
  59
  60
  61
  62
  64
  65
  66
  67
  68
  70
  71
  72
  74
  76
  79
  81
  82
  83
  84
  85
  87
  89
  92
  93
  95
  96
  98
 103
 104
 106
 108
 109
 111
 112
 113
 114
 115
 117
 119
 120
 121
 122
 123
 127
 128
 130
 131
 133
 135
 136
 138
 139
 141
 142
 143
 144
 146
 147
 149
 151
 152
 153
 154
 157
 158
 159
 160
 161
 163
 164
 165
 166
 167
 168
 169
 170
 171
 172
 174
 175
 178
 179
[ CUDAIntType{125} ]
nonzero(arg0: torch.Tensor) -> torch.Tensor

Nonzero Kernel Implement

torch.Size([125, 3])
tensor([[0, 0, 0],
        [0, 0, 1],
        [0, 0, 2],
        [0, 0, 4],
        [0, 1, 1],
        [0, 1, 2],
        [0, 1, 3],
        [0, 2, 1],
        [0, 2, 3],
        [0, 2, 4],
        [0, 3, 0],
        [0, 3, 1],
        [0, 3, 4],
        [0, 4, 0],
        [0, 4, 2],
        [0, 4, 4],
        [0, 5, 2],
        [0, 5, 3],
        [0, 5, 4],
        [1, 0, 0],
        [1, 0, 1],
        [1, 0, 2],
        [1, 0, 3],
        [1, 0, 4],
        [1, 1, 1],
        [1, 1, 3],
        [1, 1, 4],
        [1, 2, 1],
        [1, 2, 2],
        [1, 2, 3],
        [1, 2, 4],
        [1, 3, 0],
        [1, 3, 2],
        [1, 3, 3],
        [1, 3, 4],
        [1, 4, 0],
        [1, 4, 1],
        [1, 4, 2],
        [1, 4, 3],
        [1, 4, 4],
        [1, 5, 0],
        [1, 5, 1],
        [1, 5, 2],
        [1, 5, 4],
        [2, 0, 0],
        [2, 0, 1],
        [2, 0, 2],
        [2, 0, 4],
        [2, 1, 0],
        [2, 1, 1],
        [2, 1, 2],
        [2, 1, 3],
        [2, 2, 0],
        [2, 2, 1],
        [2, 2, 2],
        [2, 2, 4],
        [2, 3, 1],
        [2, 3, 4],
        [2, 4, 1],
        [2, 4, 2],
        [2, 4, 3],
        [2, 4, 4],
        [2, 5, 0],
        [2, 5, 2],
        [2, 5, 4],
        [3, 0, 2],
        [3, 0, 3],
        [3, 1, 0],
        [3, 1, 1],
        [3, 1, 3],
        [3, 2, 3],
        [3, 2, 4],
        [3, 3, 1],
        [3, 3, 3],
        [3, 3, 4],
        [3, 4, 1],
        [3, 4, 2],
        [3, 4, 3],
        [3, 4, 4],
        [3, 5, 0],
        [3, 5, 2],
        [3, 5, 4],
        [4, 0, 0],
        [4, 0, 1],
        [4, 0, 2],
        [4, 0, 3],
        [4, 1, 2],
        [4, 1, 3],
        [4, 2, 0],
        [4, 2, 1],
        [4, 2, 3],
        [4, 3, 0],
        [4, 3, 1],
        [4, 3, 3],
        [4, 3, 4],
        [4, 4, 1],
        [4, 4, 2],
        [4, 4, 3],
        [4, 4, 4],
        [4, 5, 1],
        [4, 5, 2],
        [4, 5, 4],
        [5, 0, 1],
        [5, 0, 2],
        [5, 0, 3],
        [5, 0, 4],
        [5, 1, 2],
        [5, 1, 3],
        [5, 1, 4],
        [5, 2, 0],
        [5, 2, 1],
        [5, 2, 3],
        [5, 2, 4],
        [5, 3, 0],
        [5, 3, 1],
        [5, 3, 2],
        [5, 3, 3],
        [5, 3, 4],
        [5, 4, 0],
        [5, 4, 1],
        [5, 4, 2],
        [5, 4, 4],
        [5, 5, 0],
        [5, 5, 3],
        [5, 5, 4]], device='cuda:0', dtype=torch.int32)
True


Tensor with Random Zeros:
torch.Size([3, 1024, 1024])
Torch Nonzero Operator Result
torch.Size([2201756, 3])
Custom Kernel Nonzero Result
nonzero(arg0: torch.Tensor) -> torch.Tensor

Nonzero Kernel Implement

torch.Size([2201756, 3])
True
